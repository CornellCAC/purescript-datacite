Parse Success!

-----------------

Schema {schema_elementFormDefault = Qualified, schema_attributeFormDefault = Unqualified, schema_finalDefault = Nothing, schema_blockDefault = Nothing, schema_targetNamespace = Just "http://datacite.org/schema/kernel-4", schema_version = Nothing, schema_namespaces = [Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"},Namespace {nsPrefix = "xsi", nsURI = "http://www.w3.org/2001/XMLSchema-instance"}], schema_items = [Import "http://www.w3.org/XML/1998/namespace" "include/xml.xsd" (NoAnnotation "missing"),Include "include/datacite-titleType-v4.xsd" (NoAnnotation "missing"),Include "include/datacite-contributorType-v4.xsd" (NoAnnotation "missing"),Include "include/datacite-dateType-v4.xsd" (NoAnnotation "missing"),Include "include/datacite-resourceType-v4.xsd" (NoAnnotation "missing"),Include "include/datacite-relationType-v4.xsd" (NoAnnotation "missing"),Include "include/datacite-relatedIdentifierType-v4.xsd" (NoAnnotation "missing"),Include "include/datacite-funderIdentifierType-v4.xsd" (NoAnnotation "missing"),Include "include/datacite-descriptionType-v4.xsd" (NoAnnotation "missing"),Include "include/datacite-nameType-v4.xsd" (NoAnnotation "missing"),SchemaElement (ElementDecl {elem_annotation = NoAnnotation "failed to parse", elem_nameOrRef = Left (NT {theName = "resource", theType = Nothing}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = Documentation "A persistent identifier that identifies a resource.", elem_nameOrRef = Left (NT {theName = "identifier", theType = Nothing}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = SimpleContent {ci_annotation = NoAnnotation "missing", ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "nonemptycontentStringType", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "identifierType", theType = Nothing}), attr_use = Required, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "creators", theType = Nothing}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "failed to parse", elem_nameOrRef = Left (NT {theName = "creator", theType = Nothing}), elem_occurs = Occurs Nothing (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "creatorName", theType = Nothing}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = SimpleContent {ci_annotation = NoAnnotation "missing", ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "nameType", theType = Just (N "nameType")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Right (QN (Namespace {nsPrefix = "xml", nsURI = ""}) "lang"), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "givenName", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "familyName", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "nameIdentifier", theType = Nothing}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "affiliation", theType = Nothing}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing}})), elem_stuff = []})]))) [] Nothing}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "titles", theType = Nothing}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = Documentation "A name or title by which a resource is known.", elem_nameOrRef = Left (NT {theName = "title", theType = Nothing}), elem_occurs = Occurs Nothing (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = SimpleContent {ci_annotation = NoAnnotation "missing", ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "titleType", theType = Just (N "titleType")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Right (QN (Namespace {nsPrefix = "xml", nsURI = ""}) "lang"), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}})), elem_stuff = []})]))) [] Nothing}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "failed to parse", elem_nameOrRef = Left (NT {theName = "publisher", theType = Nothing}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = SimpleContent {ci_annotation = NoAnnotation "missing", ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "nonemptycontentStringType", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Right (QN (Namespace {nsPrefix = "xml", nsURI = ""}) "lang"), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "failed to parse", elem_nameOrRef = Left (NT {theName = "publicationYear", theType = Nothing}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Left (Restricted {simple_annotation = NoAnnotation "missing", simple_name = Nothing, simple_final = Nothing, simple_restriction = RestrictSim1 {restrict_annotation = NoAnnotation "missing", restrict_base = Just (N "yearType"), restrict_r1 = Restriction1 Nothing}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "failed to parse", elem_nameOrRef = Left (NT {theName = "resourceType", theType = Nothing}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = SimpleContent {ci_annotation = NoAnnotation "missing", ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "resourceTypeGeneral", theType = Just (N "resourceType")}), attr_use = Required, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "subjects", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = Documentation "Subject, keywords, classification codes, or key phrases describing the resource.", elem_nameOrRef = Left (NT {theName = "subject", theType = Nothing}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = SimpleContent {ci_annotation = NoAnnotation "missing", ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "subjectScheme", theType = Nothing}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "schemeURI", theType = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "valueURI", theType = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Right (QN (Namespace {nsPrefix = "xml", nsURI = ""}) "lang"), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}})), elem_stuff = []})]))) [] Nothing}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "contributors", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "failed to parse", elem_nameOrRef = Left (NT {theName = "contributor", theType = Nothing}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "contributorName", theType = Nothing}), elem_occurs = Occurs Nothing Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = SimpleContent {ci_annotation = NoAnnotation "missing", ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "nonemptycontentStringType", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "nameType", theType = Just (N "nameType")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Right (QN (Namespace {nsPrefix = "xml", nsURI = ""}) "lang"), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "givenName", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "familyName", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "nameIdentifier", theType = Nothing}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "affiliation", theType = Nothing}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "contributorType", theType = Just (N "contributorType")}), attr_use = Required, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing}})), elem_stuff = []})]))) [] Nothing}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "dates", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "failed to parse", elem_nameOrRef = Left (NT {theName = "date", theType = Nothing}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = SimpleContent {ci_annotation = NoAnnotation "missing", ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "dateType", theType = Just (N "dateType")}), attr_use = Required, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "dateInformation", theType = Nothing}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}})), elem_stuff = []})]))) [] Nothing}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = Documentation "Primary language of the resource. Allowed values are taken from  IETF BCP 47, ISO 639-1 language codes.", elem_nameOrRef = Left (NT {theName = "language", theType = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "language")}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "alternateIdentifiers", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = Documentation "An identifier or identifiers other than the primary Identifier applied to the resource being registered. This may be any alphanumeric string which is unique within its domain of issue. May be used for local identifiers. AlternateIdentifier should be used for another identifier of the same instance (same location, same file).", elem_nameOrRef = Left (NT {theName = "alternateIdentifier", theType = Nothing}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = SimpleContent {ci_annotation = NoAnnotation "missing", ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "alternateIdentifierType", theType = Nothing}), attr_use = Required, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}})), elem_stuff = []})]))) [] Nothing}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "relatedIdentifiers", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = Documentation "Identifiers of related resources. Use this property to indicate subsets of properties, as appropriate.", elem_nameOrRef = Left (NT {theName = "relatedIdentifier", theType = Nothing}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = SimpleContent {ci_annotation = NoAnnotation "missing", ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "resourceTypeGeneral", theType = Just (N "resourceType")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "relatedIdentifierType", theType = Just (N "relatedIdentifierType")}), attr_use = Required, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "relationType", theType = Just (N "relationType")}), attr_use = Required, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "relatedMetadataScheme", theType = Nothing}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "schemeURI", theType = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "schemeType", theType = Nothing}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}})), elem_stuff = []})]))) [] Nothing}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "sizes", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = Documentation "Unstructures size information about the resource.", elem_nameOrRef = Left (NT {theName = "size", theType = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "formats", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "failed to parse", elem_nameOrRef = Left (NT {theName = "format", theType = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "failed to parse", elem_nameOrRef = Left (NT {theName = "version", theType = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "rightsList", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = Documentation "Any rights information for this resource. Provide a rights management statement for the resource or reference a service providing such information. Include embargo information if applicable.\nUse the complete title of a license and include version information if applicable.", elem_nameOrRef = Left (NT {theName = "rights", theType = Nothing}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = SimpleContent {ci_annotation = NoAnnotation "missing", ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "rightsURI", theType = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "rightsIdentifier", theType = Nothing}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "rightsIdentifierScheme", theType = Nothing}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "schemeURI", theType = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Right (QN (Namespace {nsPrefix = "xml", nsURI = ""}) "lang"), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}})), elem_stuff = []})]))) [] Nothing}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "descriptions", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = Documentation "All additional information that does not fit in any of the other categories. May be used for technical information. It is a best practice to supply a description.", elem_nameOrRef = Left (NT {theName = "description", theType = Nothing}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = True, complex_content = ThisType {ci_thistype = PA (Just (Left (Choice (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "br", theType = Nothing}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA Nothing [] Nothing}})), elem_stuff = []})]))) [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "descriptionType", theType = Just (N "descriptionType")}), attr_use = Required, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Right (QN (Namespace {nsPrefix = "xml", nsURI = ""}) "lang"), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing}})), elem_stuff = []})]))) [] Nothing}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "geoLocations", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "geoLocation", theType = Nothing}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Choice (NoAnnotation "missing") (Occurs Nothing (Just 9223372036854775807)) [HasElement (ElementDecl {elem_annotation = Documentation "Spatial region or named place where the data was gathered or about which the data is focused.", elem_nameOrRef = Left (NT {theName = "geoLocationPlace", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = Documentation "A point contains a single latitude-longitude pair.", elem_nameOrRef = Left (NT {theName = "geoLocationPoint", theType = Just (N "point")}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = Documentation "A box contains two white space separated latitude-longitude pairs, with each pair separated by whitespace. The first pair is the lower corner, the second is the upper corner.", elem_nameOrRef = Left (NT {theName = "geoLocationBox", theType = Just (N "box")}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = Documentation "A drawn polygon area, defined by a set of points and lines connecting the points in a closed chain.", elem_nameOrRef = Left (NT {theName = "geoLocationPolygon", theType = Nothing}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "polygonPoint", theType = Just (N "point")}), elem_occurs = Occurs (Just 4) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "inPolygonPoint", theType = Just (N "point")}), elem_occurs = Occurs (Just 0) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing}})), elem_stuff = []})]))) [] Nothing}})), elem_stuff = []})]))) [] Nothing}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "fundingReferences", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = Documentation "Information about financial support (funding) for the resource being registered.", elem_nameOrRef = Left (NT {theName = "fundingReference", theType = Nothing}), elem_occurs = Occurs (Just 0) (Just 9223372036854775807), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = Documentation "Name of the funding provider.", elem_nameOrRef = Left (NT {theName = "funderName", theType = Nothing}), elem_occurs = Occurs (Just 1) (Just 1), elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Left (Restricted {simple_annotation = NoAnnotation "missing", simple_name = Nothing, simple_final = Nothing, simple_restriction = RestrictSim1 {restrict_annotation = NoAnnotation "missing", restrict_base = Just (N "nonemptycontentStringType"), restrict_r1 = Restriction1 Nothing}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = Documentation "Uniquely identifies a funding entity, according to various types.", elem_nameOrRef = Left (NT {theName = "funderIdentifier", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = SimpleContent {ci_annotation = NoAnnotation "missing", ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "funderIdentifierType", theType = Just (N "funderIdentifierType")}), attr_use = Required, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "schemeURI", theType = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = Documentation "The code assigned by the funder to a sponsored award (grant).", elem_nameOrRef = Left (NT {theName = "awardNumber", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Just (Right (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Nothing, complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = SimpleContent {ci_annotation = NoAnnotation "missing", ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "awardURI", theType = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}})), elem_stuff = []}),HasElement (ElementDecl {elem_annotation = Documentation "The human readable title of the award (grant).", elem_nameOrRef = Left (NT {theName = "awardTitle", theType = Nothing}), elem_occurs = Occurs (Just 0) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing}})), elem_stuff = []})]))) [] Nothing}})), elem_stuff = []})]))) [] Nothing}})), elem_stuff = []}),Simple (Restricted {simple_annotation = NoAnnotation "missing", simple_name = Just "nonemptycontentStringType", simple_final = Nothing, simple_restriction = RestrictType {restrict_annotation = NoAnnotation "missing", restrict_base = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string"), restrict_type = Nothing, restrict_facets = [Facet {facet_facetType = UnorderedMinLength, facet_annotation = NoAnnotation "missing", facet_facetValue = "1", facet_fixed = False}]}}),Complex (ComplexType {complex_annotation = Documentation "Uniquely identifies a creator or contributor, according to various identifier schemes.", complex_name = Just "nameIdentifier", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = SimpleContent {ci_annotation = NoAnnotation "missing", ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "nonemptycontentStringType", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "nameIdentifierScheme", theType = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Required, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "schemeURI", theType = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),Simple (Restricted {simple_annotation = NoAnnotation "missing", simple_name = Just "edtf", simple_final = Nothing, simple_restriction = RestrictType {restrict_annotation = NoAnnotation "missing", restrict_base = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string"), restrict_type = Nothing, restrict_facets = [Facet {facet_facetType = UnorderedPattern, facet_annotation = NoAnnotation "missing", facet_facetValue = "(-)?[0-9]{4}(-[0-9]{2})?(-[0-9]{2})?(T([0-9]{2}:){2}[0-9]{2}Z)?", facet_fixed = False},Facet {facet_facetType = UnorderedPattern, facet_annotation = NoAnnotation "missing", facet_facetValue = "\\d{2}(\\d{2}|\\?\\?|\\d(\\d|\\?))(-(\\d{2}|\\?\\?))?~?\\??", facet_fixed = False},Facet {facet_facetType = UnorderedPattern, facet_annotation = NoAnnotation "missing", facet_facetValue = "\\d{6}(\\d{2}|\\?\\?)~?\\??", facet_fixed = False},Facet {facet_facetType = UnorderedPattern, facet_annotation = NoAnnotation "missing", facet_facetValue = "\\d{8}T\\d{6}", facet_fixed = False},Facet {facet_facetType = UnorderedPattern, facet_annotation = NoAnnotation "missing", facet_facetValue = "((-)?(\\d{4}(-\\d{2})?(-\\d{2})?)|unknown)/((-)?(\\d{4}(-\\d{2})?(-\\d{2})?)|unknown|open)", facet_fixed = False}]}}),Complex (ComplexType {complex_annotation = Documentation "Uniquely identifies an affiliation, according to various identifier schemes.", complex_name = Just "affiliation", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = SimpleContent {ci_annotation = NoAnnotation "missing", ci_stuff = Right (Extension {extension_annotation = NoAnnotation "missing", extension_base = N "nonemptycontentStringType", extension_newstuff = PA Nothing [Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "affiliationIdentifier", theType = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "affiliationIdentifierScheme", theType = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "string")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing}),Left (AttributeDecl {attr_annotation = NoAnnotation "missing", attr_nameOrRef = Left (NT {theName = "schemeURI", theType = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "anyURI")}), attr_use = Optional, attr_defFixed = Nothing, attr_form = Unqualified, attr_simpleType = Nothing})] Nothing})}}),Simple (Restricted {simple_annotation = NoAnnotation "missing", simple_name = Just "yearType", simple_final = Nothing, simple_restriction = RestrictType {restrict_annotation = NoAnnotation "missing", restrict_base = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "token"), restrict_type = Nothing, restrict_facets = [Facet {facet_facetType = UnorderedPattern, facet_annotation = NoAnnotation "missing", facet_facetValue = "[\\d]{4}", facet_fixed = False}]}}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "point", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "pointLongitude", theType = Just (N "longitudeType")}), elem_occurs = Occurs (Just 1) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "pointLatitude", theType = Just (N "latitudeType")}), elem_occurs = Occurs (Just 1) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing}}),Complex (ComplexType {complex_annotation = NoAnnotation "missing", complex_name = Just "box", complex_abstract = False, complex_final = Nothing, complex_block = Nothing, complex_mixed = False, complex_content = ThisType {ci_thistype = PA (Just (Left (Sequence (NoAnnotation "missing") (Occurs Nothing Nothing) [HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "westBoundLongitude", theType = Just (N "longitudeType")}), elem_occurs = Occurs (Just 1) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "eastBoundLongitude", theType = Just (N "longitudeType")}), elem_occurs = Occurs (Just 1) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "southBoundLatitude", theType = Just (N "latitudeType")}), elem_occurs = Occurs (Just 1) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []}),HasElement (ElementDecl {elem_annotation = NoAnnotation "missing", elem_nameOrRef = Left (NT {theName = "northBoundLatitude", theType = Just (N "latitudeType")}), elem_occurs = Occurs (Just 1) Nothing, elem_nillable = False, elem_substGroup = Nothing, elem_abstract = False, elem_final = Nothing, elem_block = Nothing, elem_form = Unqualified, elem_content = Nothing, elem_stuff = []})]))) [] Nothing}}),Simple (Restricted {simple_annotation = NoAnnotation "missing", simple_name = Just "longitudeType", simple_final = Nothing, simple_restriction = RestrictType {restrict_annotation = NoAnnotation "missing", restrict_base = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "float"), restrict_type = Nothing, restrict_facets = [Facet {facet_facetType = OrderedBoundsMinIncl, facet_annotation = NoAnnotation "missing", facet_facetValue = "-180", facet_fixed = False},Facet {facet_facetType = OrderedBoundsMaxIncl, facet_annotation = NoAnnotation "missing", facet_facetValue = "180", facet_fixed = False}]}}),Simple (Restricted {simple_annotation = NoAnnotation "missing", simple_name = Just "latitudeType", simple_final = Nothing, simple_restriction = RestrictType {restrict_annotation = NoAnnotation "missing", restrict_base = Just (QN (Namespace {nsPrefix = "xs", nsURI = "http://www.w3.org/2001/XMLSchema"}) "float"), restrict_type = Nothing, restrict_facets = [Facet {facet_facetType = OrderedBoundsMinIncl, facet_annotation = NoAnnotation "missing", facet_facetValue = "-90", facet_fixed = False},Facet {facet_facetType = OrderedBoundsMaxIncl, facet_annotation = NoAnnotation "missing", facet_facetValue = "90", facet_fixed = False}]}})]}

-----------------

{-# LANGUAGE MultiParamTypeClasses, FunctionalDependencies #-}
{-# OPTIONS_GHC -fno-warn-duplicate-exports #-}
module V'
  ( module V'
  , module Include'datacite'titleType'v4'xsd
  , module Include'datacite'contributorType'v4'xsd
  , module Include'datacite'dateType'v4'xsd
  , module Include'datacite'resourceType'v4'xsd
  , module Include'datacite'relationType'v4'xsd
  , module Include'datacite'relatedIdentifierType'v4'xsd
  , module Include'datacite'funderIdentifierType'v4'xsd
  , module Include'datacite'descriptionType'v4'xsd
  , module Include'datacite'nameType'v4'xsd
  ) where
 
import Text.XML.HaXml.Schema.Schema (SchemaType(..),SimpleType(..),Extension(..),Restricts(..))
import Text.XML.HaXml.Schema.Schema as Schema
import Text.XML.HaXml.OneOfN
import qualified Text.XML.HaXml.Schema.PrimitiveTypes as Xs
import Include'datacite'titleType'v4'xsd
import Include'datacite'contributorType'v4'xsd
import Include'datacite'dateType'v4'xsd
import Include'datacite'resourceType'v4'xsd
import Include'datacite'relationType'v4'xsd
import Include'datacite'relatedIdentifierType'v4'xsd
import Include'datacite'funderIdentifierType'v4'xsd
import Include'datacite'descriptionType'v4'xsd
import Include'datacite'nameType'v4'xsd
import Include'xml'xsd
 
-- Some hs-boot imports are required, for fwd-declaring types.
 
data Resource = Resource
        { resource_identifier :: Identifier
          -- ^ A persistent identifier that identifies a resource.
        , resource_creators :: Creators
        , resource_titles :: Titles
        , resource_publisher :: Publisher
        , resource_publicationYear :: YearType
        , resource_resourceType :: ResourceType
        , resource_subjects :: Maybe Subjects
        , resource_contributors :: Maybe Contributors
        , resource_dates :: Maybe Dates
        , resource_language :: Maybe Xs.Language
          -- ^ Primary language of the resource. Allowed values are taken 
          --   from IETF BCP 47, ISO 639-1 language codes.
        , resource_alternateIdentifiers :: Maybe AlternateIdentifiers
        , resource_relatedIdentifiers :: Maybe RelatedIdentifiers
        , resource_sizes :: Maybe Sizes
        , resource_formats :: Maybe Formats
        , resource_version :: Maybe Xsd.XsdString
        , resource_rightsList :: Maybe RightsList
        , resource_descriptions :: Maybe Descriptions
        , resource_geoLocations :: Maybe GeoLocations
        , resource_fundingReferences :: Maybe FundingReferences
        }
        deriving (Eq,Show)
instance SchemaType Resource where
    parseSchemaType s = do
        (pos,e) <- posnElement [s]
        commit $ interior e $ return Resource
            `apply` parseSchemaType "identifier"
            `apply` parseSchemaType "creators"
            `apply` parseSchemaType "titles"
            `apply` parseSchemaType "publisher"
            `apply` parseSchemaType "publicationYear"
            `apply` parseSchemaType "resourceType"
            `apply` optional (parseSchemaType "subjects")
            `apply` optional (parseSchemaType "contributors")
            `apply` optional (parseSchemaType "dates")
            `apply` optional (parseSchemaType "language")
            `apply` optional (parseSchemaType "alternateIdentifiers")
            `apply` optional (parseSchemaType "relatedIdentifiers")
            `apply` optional (parseSchemaType "sizes")
            `apply` optional (parseSchemaType "formats")
            `apply` optional (parseSchemaType "version")
            `apply` optional (parseSchemaType "rightsList")
            `apply` optional (parseSchemaType "descriptions")
            `apply` optional (parseSchemaType "geoLocations")
            `apply` optional (parseSchemaType "fundingReferences")
    schemaTypeToXML s x@Resource{} =
        toXMLElement s []
            [ schemaTypeToXML "identifier" $ resource_identifier x
            , schemaTypeToXML "creators" $ resource_creators x
            , schemaTypeToXML "titles" $ resource_titles x
            , schemaTypeToXML "publisher" $ resource_publisher x
            , schemaTypeToXML "publicationYear" $ resource_publicationYear x
            , schemaTypeToXML "resourceType" $ resource_resourceType x
            , maybe [] (schemaTypeToXML "subjects") $ resource_subjects x
            , maybe [] (schemaTypeToXML "contributors") $ resource_contributors x
            , maybe [] (schemaTypeToXML "dates") $ resource_dates x
            , maybe [] (schemaTypeToXML "language") $ resource_language x
            , maybe [] (schemaTypeToXML "alternateIdentifiers") $ resource_alternateIdentifiers x
            , maybe [] (schemaTypeToXML "relatedIdentifiers") $ resource_relatedIdentifiers x
            , maybe [] (schemaTypeToXML "sizes") $ resource_sizes x
            , maybe [] (schemaTypeToXML "formats") $ resource_formats x
            , maybe [] (schemaTypeToXML "version") $ resource_version x
            , maybe [] (schemaTypeToXML "rightsList") $ resource_rightsList x
            , maybe [] (schemaTypeToXML "descriptions") $ resource_descriptions x
            , maybe [] (schemaTypeToXML "geoLocations") $ resource_geoLocations x
            , maybe [] (schemaTypeToXML "fundingReferences") $ resource_fundingReferences x
            ]
 
elementResource :: XMLParser Resource
elementResource = parseSchemaType "resource"
elementToXMLResource :: Resource -> [Content ()]
elementToXMLResource = schemaTypeToXML "resource"
 
newtype NonemptycontentStringType = NonemptycontentStringType Xsd.XsdString deriving (Eq,Show)
instance Restricts NonemptycontentStringType Xsd.XsdString where
    restricts (NonemptycontentStringType x) = x
instance SchemaType NonemptycontentStringType where
    parseSchemaType s = do
        e <- element [s]
        commit $ interior e $ parseSimpleType
    schemaTypeToXML s (NonemptycontentStringType x) = 
        toXMLElement s [] [toXMLText (simpleTypeText x)]
instance SimpleType NonemptycontentStringType where
    acceptingParser = fmap NonemptycontentStringType acceptingParser
    -- XXX should enforce the restrictions somehow?
    -- The restrictions are:
    --      (StrLength (Occurs (Just 1) Nothing))
    simpleTypeText (NonemptycontentStringType x) = simpleTypeText x
 
-- | Uniquely identifies a creator or contributor, according to 
--   various identifier schemes.
data NameIdentifier = NameIdentifier NonemptycontentStringType NameIdentifierAttributes deriving (Eq,Show)
data NameIdentifierAttributes = NameIdentifierAttributes
    { nameIdentifierAttributes_nameIdentifierScheme :: Xsd.XsdString
    , nameIdentifierAttributes_schemeURI :: Maybe Xs.AnyURI
    }
    deriving (Eq,Show)
instance SchemaType NameIdentifier where
    parseSchemaType s = do
        (pos,e) <- posnElement [s]
        commit $ do
          a0 <- getAttribute "nameIdentifierScheme" e pos
          a1 <- optional $ getAttribute "schemeURI" e pos
          reparse [CElem e pos]
          v <- parseSchemaType s
          return $ NameIdentifier v (NameIdentifierAttributes a0 a1)
    schemaTypeToXML s (NameIdentifier bt at) =
        addXMLAttributes [ toXMLAttribute "nameIdentifierScheme" $ nameIdentifierAttributes_nameIdentifierScheme at
                         , maybe [] (toXMLAttribute "schemeURI") $ nameIdentifierAttributes_schemeURI at
                         ]
            $ schemaTypeToXML s bt
instance Extension NameIdentifier NonemptycontentStringType where
    supertype (NameIdentifier s _) = s
 
newtype Edtf = Edtf Xsd.XsdString deriving (Eq,Show)
instance Restricts Edtf Xsd.XsdString where
    restricts (Edtf x) = x
instance SchemaType Edtf where
    parseSchemaType s = do
        e <- element [s]
        commit $ interior e $ parseSimpleType
    schemaTypeToXML s (Edtf x) = 
        toXMLElement s [] [toXMLText (simpleTypeText x)]
instance SimpleType Edtf where
    acceptingParser = fmap Edtf acceptingParser
    -- XXX should enforce the restrictions somehow?
    -- The restrictions are:
    --      (Pattern (-)?[0-9]{4}(-[0-9]{2})?(-[0-9]{2})?(T([0-9]{2}:){2}[0-9]{2}Z)?)
    --      (Pattern \d{2}(\d{2}|\?\?|\d(\d|\?))(-(\d{2}|\?\?))?~?\??)
    --      (Pattern \d{6}(\d{2}|\?\?)~?\??)
    --      (Pattern \d{8}T\d{6})
    --      (Pattern ((-)?(\d{4}(-\d{2})?(-\d{2})?)|unknown)/((-)?(\d{4}(-\d{2})?(-\d{2})?)|unknown|open))
    simpleTypeText (Edtf x) = simpleTypeText x
 
-- | Uniquely identifies an affiliation, according to various 
--   identifier schemes.
data Affiliation = Affiliation NonemptycontentStringType AffiliationAttributes deriving (Eq,Show)
data AffiliationAttributes = AffiliationAttributes
    { affiliationAttributes_affiliationIdentifier :: Maybe Xsd.XsdString
    , affiliationAttributes_affiliationIdentifierScheme :: Maybe Xsd.XsdString
    , affiliationAttributes_schemeURI :: Maybe Xs.AnyURI
    }
    deriving (Eq,Show)
instance SchemaType Affiliation where
    parseSchemaType s = do
        (pos,e) <- posnElement [s]
        commit $ do
          a0 <- optional $ getAttribute "affiliationIdentifier" e pos
          a1 <- optional $ getAttribute "affiliationIdentifierScheme" e pos
          a2 <- optional $ getAttribute "schemeURI" e pos
          reparse [CElem e pos]
          v <- parseSchemaType s
          return $ Affiliation v (AffiliationAttributes a0 a1 a2)
    schemaTypeToXML s (Affiliation bt at) =
        addXMLAttributes [ maybe [] (toXMLAttribute "affiliationIdentifier") $ affiliationAttributes_affiliationIdentifier at
                         , maybe [] (toXMLAttribute "affiliationIdentifierScheme") $ affiliationAttributes_affiliationIdentifierScheme at
                         , maybe [] (toXMLAttribute "schemeURI") $ affiliationAttributes_schemeURI at
                         ]
            $ schemaTypeToXML s bt
instance Extension Affiliation NonemptycontentStringType where
    supertype (Affiliation s _) = s
 
newtype YearType = YearType Xs.Token deriving (Eq,Show)
instance Restricts YearType Xs.Token where
    restricts (YearType x) = x
instance SchemaType YearType where
    parseSchemaType s = do
        e <- element [s]
        commit $ interior e $ parseSimpleType
    schemaTypeToXML s (YearType x) = 
        toXMLElement s [] [toXMLText (simpleTypeText x)]
instance SimpleType YearType where
    acceptingParser = fmap YearType acceptingParser
    -- XXX should enforce the restrictions somehow?
    -- The restrictions are:
    --      (Pattern [\d]{4})
    simpleTypeText (YearType x) = simpleTypeText x
 
data Point = Point
        { point_pointLongitude :: [LongitudeType]
        , point_pointLatitude :: [LatitudeType]
        }
        deriving (Eq,Show)
instance SchemaType Point where
    parseSchemaType s = do
        (pos,e) <- posnElement [s]
        commit $ interior e $ return Point
            `apply` between (Occurs (Just 1) Nothing)
                            (parseSchemaType "pointLongitude")
            `apply` between (Occurs (Just 1) Nothing)
                            (parseSchemaType "pointLatitude")
    schemaTypeToXML s x@Point{} =
        toXMLElement s []
            [ concatMap (schemaTypeToXML "pointLongitude") $ point_pointLongitude x
            , concatMap (schemaTypeToXML "pointLatitude") $ point_pointLatitude x
            ]
 
data Box = Box
        { box_westBoundLongitude :: [LongitudeType]
        , box_eastBoundLongitude :: [LongitudeType]
        , box_southBoundLatitude :: [LatitudeType]
        , box_northBoundLatitude :: [LatitudeType]
        }
        deriving (Eq,Show)
instance SchemaType Box where
    parseSchemaType s = do
        (pos,e) <- posnElement [s]
        commit $ interior e $ return Box
            `apply` between (Occurs (Just 1) Nothing)
                            (parseSchemaType "westBoundLongitude")
            `apply` between (Occurs (Just 1) Nothing)
                            (parseSchemaType "eastBoundLongitude")
            `apply` between (Occurs (Just 1) Nothing)
                            (parseSchemaType "southBoundLatitude")
            `apply` between (Occurs (Just 1) Nothing)
                            (parseSchemaType "northBoundLatitude")
    schemaTypeToXML s x@Box{} =
        toXMLElement s []
            [ concatMap (schemaTypeToXML "westBoundLongitude") $ box_westBoundLongitude x
            , concatMap (schemaTypeToXML "eastBoundLongitude") $ box_eastBoundLongitude x
            , concatMap (schemaTypeToXML "southBoundLatitude") $ box_southBoundLatitude x
            , concatMap (schemaTypeToXML "northBoundLatitude") $ box_northBoundLatitude x
            ]
 
newtype LongitudeType = LongitudeType Xs.Float deriving (Eq,Show)
instance Restricts LongitudeType Xs.Float where
    restricts (LongitudeType x) = x
instance SchemaType LongitudeType where
    parseSchemaType s = do
        e <- element [s]
        commit $ interior e $ parseSimpleType
    schemaTypeToXML s (LongitudeType x) = 
        toXMLElement s [] [toXMLText (simpleTypeText x)]
instance SimpleType LongitudeType where
    acceptingParser = fmap LongitudeType acceptingParser
    -- XXX should enforce the restrictions somehow?
    -- The restrictions are:
    --      (RangeR (Occurs (Just (-180)) (Just 180)))
    simpleTypeText (LongitudeType x) = simpleTypeText x
 
newtype LatitudeType = LatitudeType Xs.Float deriving (Eq,Show)
instance Restricts LatitudeType Xs.Float where
    restricts (LatitudeType x) = x
instance SchemaType LatitudeType where
    parseSchemaType s = do
        e <- element [s]
        commit $ interior e $ parseSimpleType
    schemaTypeToXML s (LatitudeType x) = 
        toXMLElement s [] [toXMLText (simpleTypeText x)]
instance SimpleType LatitudeType where
    acceptingParser = fmap LatitudeType acceptingParser
    -- XXX should enforce the restrictions somehow?
    -- The restrictions are:
    --      (RangeR (Occurs (Just (-90)) (Just 90)))
    simpleTypeText (LatitudeType x) = simpleTypeText x
